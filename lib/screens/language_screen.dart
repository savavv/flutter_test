import 'package:flutter/material.dart';
import '../widgets/custom_app_bar.dart';

class LanguageScreen extends StatefulWidget {
  const LanguageScreen({super.key});

  @override
  State<LanguageScreen> createState() => _LanguageScreenState();
}

class _LanguageScreenState extends State<LanguageScreen> {
  String _selectedLanguage = '–†—É—Å—Å–∫–∏–π';

  final List<LanguageOption> _languages = [
    LanguageOption(
      name: '–†—É—Å—Å–∫–∏–π',
      nativeName: '–†—É—Å—Å–∫–∏–π',
      code: 'ru',
      flag: 'üá∑üá∫',
    ),
    LanguageOption(
      name: 'English',
      nativeName: 'English',
      code: 'en',
      flag: 'üá∫üá∏',
    ),
    LanguageOption(
      name: 'Espa√±ol',
      nativeName: 'Espa√±ol',
      code: 'es',
      flag: 'üá™üá∏',
    ),
    LanguageOption(
      name: 'Fran√ßais',
      nativeName: 'Fran√ßais',
      code: 'fr',
      flag: 'üá´üá∑',
    ),
    LanguageOption(
      name: 'Deutsch',
      nativeName: 'Deutsch',
      code: 'de',
      flag: 'üá©üá™',
    ),
    LanguageOption(
      name: 'Italiano',
      nativeName: 'Italiano',
      code: 'it',
      flag: 'üáÆüáπ',
    ),
    LanguageOption(
      name: 'Portugu√™s',
      nativeName: 'Portugu√™s',
      code: 'pt',
      flag: 'üáµüáπ',
    ),
    LanguageOption(
      name: '‰∏≠Êñá',
      nativeName: '‰∏≠Êñá',
      code: 'zh',
      flag: 'üá®üá≥',
    ),
    LanguageOption(
      name: 'Êó•Êú¨Ë™û',
      nativeName: 'Êó•Êú¨Ë™û',
      code: 'ja',
      flag: 'üáØüáµ',
    ),
    LanguageOption(
      name: 'ÌïúÍµ≠Ïñ¥',
      nativeName: 'ÌïúÍµ≠Ïñ¥',
      code: 'ko',
      flag: 'üá∞üá∑',
    ),
    LanguageOption(
      name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
      nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
      code: 'ar',
      flag: 'üá∏üá¶',
    ),
    LanguageOption(
      name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
      nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
      code: 'hi',
      flag: 'üáÆüá≥',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBar(
        title: '–Ø–∑—ã–∫',
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          _buildSectionTitle('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'),
          const SizedBox(height: 16),
          
          ..._languages.map((language) => _buildLanguageOption(language)).toList(),
          
          const SizedBox(height: 32),
          
          _buildSectionTitle('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
          const SizedBox(height: 16),
          
          _buildActionTile(
            title: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞',
            subtitle: '–û–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–∏—Å—Ç–µ–º—ã',
            icon: Icons.auto_awesome,
            onTap: () {
              _showAutoLanguageDialog();
            },
          ),
          const SizedBox(height: 8),
          
          _buildActionTile(
            title: '–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π',
            subtitle: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è',
            icon: Icons.translate,
            onTap: () {
              _showTranslationSettings();
            },
          ),
          const SizedBox(height: 32),
          
          _buildSectionTitle('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä'),
          const SizedBox(height: 16),
          
          _buildLanguagePreview(),
          
          const SizedBox(height: 32),
        ],
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.bold,
        color: Colors.black87,
      ),
    );
  }

  Widget _buildLanguageOption(LanguageOption language) {
    final isSelected = _selectedLanguage == language.name;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      decoration: BoxDecoration(
        color: isSelected ? Colors.blue.withOpacity(0.1) : Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isSelected ? Colors.blue : Colors.grey[300]!,
          width: isSelected ? 2 : 1,
        ),
      ),
      child: ListTile(
        leading: Text(
          language.flag,
          style: const TextStyle(fontSize: 24),
        ),
        title: Text(
          language.name,
          style: TextStyle(
            fontWeight: FontWeight.w500,
            color: isSelected ? Colors.blue : Colors.black,
          ),
        ),
        subtitle: Text(
          language.nativeName,
          style: TextStyle(
            color: isSelected ? Colors.blue.withOpacity(0.8) : Colors.grey[600],
            fontSize: 14,
          ),
        ),
        trailing: isSelected
            ? const Icon(Icons.check_circle, color: Colors.blue)
            : const Icon(Icons.radio_button_unchecked),
        onTap: () {
          setState(() {
            _selectedLanguage = language.name;
          });
        },
      ),
    );
  }

  Widget _buildActionTile({
    required String title,
    required String subtitle,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: ListTile(
        leading: Icon(icon, color: Colors.blue),
        title: Text(
          title,
          style: const TextStyle(
            fontWeight: FontWeight.w500,
          ),
        ),
        subtitle: Text(
          subtitle,
          style: TextStyle(
            color: Colors.grey[600],
            fontSize: 14,
          ),
        ),
        trailing: const Icon(Icons.chevron_right),
        onTap: onTap,
      ),
    );
  }

  Widget _buildLanguagePreview() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              CircleAvatar(
                radius: 20,
                backgroundColor: Colors.blue,
                child: const Icon(Icons.person, color: Colors.white),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
                      style: TextStyle(
                        fontWeight: FontWeight.w500,
                        color: Colors.grey[800],
                      ),
                    ),
                    Text(
                      '–í —Å–µ—Ç–∏',
                      style: TextStyle(
                        color: Colors.grey[600],
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Text(
              '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
              style: TextStyle(
                color: Colors.blue,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          const SizedBox(height: 8),
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.grey[200],
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Text(
              '–í—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ! –ê —É —Ç–µ–±—è –∫–∞–∫?',
              style: TextStyle(
                color: Colors.black87,
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showAutoLanguageDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞'),
        content: const Text(
          '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              setState(() {
                _selectedLanguage = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏';
              });
            },
            child: const Text('–í–∫–ª—é—á–∏—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _showTranslationSettings() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π'),
        content: const Text(
          '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≤–∞—à —è–∑—ã–∫.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // TODO: Implement translation settings
            },
            child: const Text('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å'),
          ),
        ],
      ),
    );
  }
}

class LanguageOption {
  final String name;
  final String nativeName;
  final String code;
  final String flag;

  LanguageOption({
    required this.name,
    required this.nativeName,
    required this.code,
    required this.flag,
  });
}
